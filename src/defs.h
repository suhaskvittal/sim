#ifndef CONSTANTS_h
#define CONSTANTS_h

#include <iostream>
#include <iomanip>

#include <stdint.h>
#include <stddef.h>

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#ifndef N_THREADS
#define N_THREADS 1
#endif

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/*
 * Enum declarations.
 * */
enum class CacheResult      { HIT, MISS_NO_WB, MISS_WITH_WB };
enum class CacheReplPolicy  { LRU, RAND, SSRIP };

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/*
 * LLC definition.
 * */
constexpr size_t LLC_SIZE_KB_PER_CORE = 2*1024;
constexpr size_t LLC_SIZE_KB = LLC_SIZE_KB_PER_CORE * N_THREADS;
constexpr size_t LLC_ASSOC = 8;

constexpr CacheReplPolicy LLC_REPL_POLICY = CacheReplPolicy::LRU;
/*
 * Other constants.
 * */
constexpr size_t ROB_WIDTH = 256;
constexpr size_t OS_PAGESIZE = 4096;
constexpr size_t LINESIZE = 64;
constexpr size_t LINES_PER_PAGE = OS_PAGESIZE / LINESIZE;

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

class Core;

extern uint64_t GL_cycle_;
extern Core GL_cores_[N_THREADS];

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

template <size_t C, size_t W, CacheReplPolicy P> 
class Cache;

using LLC = Cache<LLC_SIZE_KB, LLC_ASSOC, LLC_REPL_POLICY>;

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

template <class NUMBER>
inline void PRINT_STAT(std::ostream& out, std::string name, NUMBER value) {
    out << std::setw(24) << std::left << name << "\t" << value << "\n";
}

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#define INCREMENT_AND_MOD(x,mod)            ((++(x))==(mod)) ? 0 : (x)
#define INCREMENT_AND_MOD_BY_POW2(x,mod)    (((x)+1) & ((mod)-1))

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#endif
